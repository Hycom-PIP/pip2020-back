/*
 * This file is generated by jOOQ.
 */
package com.pip.chatbot.jooq.weather.tables.records;


import com.pip.chatbot.jooq.weather.tables.City;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityRecord extends UpdatableRecordImpl<CityRecord> implements Record4<String, String, Float, Float> {

    private static final long serialVersionUID = 472124432;

    /**
     * Setter for <code>weather.city.city</code>.
     */
    public void setCity(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>weather.city.city</code>.
     */
    public String getCity() {
        return (String) get(0);
    }

    /**
     * Setter for <code>weather.city.country</code>.
     */
    public void setCountry(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>weather.city.country</code>.
     */
    public String getCountry() {
        return (String) get(1);
    }

    /**
     * Setter for <code>weather.city.latitude</code>.
     */
    public void setLatitude(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>weather.city.latitude</code>.
     */
    public Float getLatitude() {
        return (Float) get(2);
    }

    /**
     * Setter for <code>weather.city.longitude</code>.
     */
    public void setLongitude(Float value) {
        set(3, value);
    }

    /**
     * Getter for <code>weather.city.longitude</code>.
     */
    public Float getLongitude() {
        return (Float) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Float, Float> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Float, Float> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return City.CITY.CITY_;
    }

    @Override
    public Field<String> field2() {
        return City.CITY.COUNTRY;
    }

    @Override
    public Field<Float> field3() {
        return City.CITY.LATITUDE;
    }

    @Override
    public Field<Float> field4() {
        return City.CITY.LONGITUDE;
    }

    @Override
    public String component1() {
        return getCity();
    }

    @Override
    public String component2() {
        return getCountry();
    }

    @Override
    public Float component3() {
        return getLatitude();
    }

    @Override
    public Float component4() {
        return getLongitude();
    }

    @Override
    public String value1() {
        return getCity();
    }

    @Override
    public String value2() {
        return getCountry();
    }

    @Override
    public Float value3() {
        return getLatitude();
    }

    @Override
    public Float value4() {
        return getLongitude();
    }

    @Override
    public CityRecord value1(String value) {
        setCity(value);
        return this;
    }

    @Override
    public CityRecord value2(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public CityRecord value3(Float value) {
        setLatitude(value);
        return this;
    }

    @Override
    public CityRecord value4(Float value) {
        setLongitude(value);
        return this;
    }

    @Override
    public CityRecord values(String value1, String value2, Float value3, Float value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CityRecord
     */
    public CityRecord() {
        super(City.CITY);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(String city, String country, Float latitude, Float longitude) {
        super(City.CITY);

        set(0, city);
        set(1, country);
        set(2, latitude);
        set(3, longitude);
    }
}
